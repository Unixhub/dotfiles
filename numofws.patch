--- ../../2bwm.c	2013-05-26 16:33:09.000000000 +0200
+++ 2bwm.c	2013-05-28 12:43:25.000000000 +0200
@@ -97,6 +97,7 @@
 xcb_screen_t     *screen;           // Our current screen.
 int randrbase;                      // Beginning of RANDR extension events.
 uint8_t curws = 0;                  // Current workspace.
+uint8_t numofws = WORKSPACES;       // Number of workspaces.
 struct client *focuswin;            // Current focus window.
 xcb_drawable_t top_win=0;           // Window always on top.
 struct item *winlist = NULL;        // Global list of all client windows.
@@ -110,7 +111,7 @@
 #endif
     uint32_t focuscol,unfocuscol,fixedcol,unkillcol,empty_col,fixed_unkil_col,outer_border_col;
 } conf;
-xcb_atom_t atom_desktop,atom_current_desktop,atom_unkillable,wm_delete_window,wm_change_state,wm_state,wm_protocols;
+xcb_atom_t atom_desktop,atom_current_desktop,atom_number_of_desktops, atom_unkillable,wm_delete_window,wm_change_state,wm_state,wm_protocols;
 ///---Functions prototypes---///
 static void run(void);
 static bool setup(int screen);
@@ -1989,7 +1990,7 @@
     conf.outer_border_col= getcolor(colors[5]);             conf.fixed_unkil_col = getcolor(colors[4]);
     conf.empty_col       = getcolor(colors[6]);
     atom_desktop         = getatom("_NET_WM_DESKTOP");     atom_current_desktop = getatom("_NET_CURRENT_DESKTOP");
-    atom_unkillable      = getatom("_NET_UNKILLABLE");
+    atom_unkillable      = getatom("_NET_UNKILLABLE");			atom_number_of_desktops = getatom("_NET_NUMBER_OF_DESKTOPS");
     wm_delete_window     = getatom("WM_DELETE_WINDOW");    wm_change_state      = getatom("WM_CHANGE_STATE");
     wm_state             = getatom("WM_STATE");            wm_protocols         = getatom("WM_PROTOCOLS");
     randrbase = setuprandr();
@@ -2001,6 +2002,7 @@
     if (error) return false;
 
     xcb_change_property(conn, XCB_PROP_MODE_REPLACE, screen->root, atom_current_desktop, XCB_ATOM_CARDINAL, 32, 1,&curws);
+    xcb_change_property(conn, XCB_PROP_MODE_REPLACE, screen->root, atom_number_of_desktops, XCB_ATOM_CARDINAL, 32, 1, &numofws);
     grabkeys();
     /* set events */
     for (unsigned int i=0; i<XCB_NO_OPERATION; i++) events[i] = NULL;
